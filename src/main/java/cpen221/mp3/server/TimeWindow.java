package cpen221.mp3.server;

import java.util.Arrays;
import java.util.List;

/**
 * Abstraction Function;
 *
 * Representation Invariant:
 *
 * Thread Safety Argument:
 *     This class is threadsafe because it is immutable:
 *     - all fields are private and final. The data they contain are also immutable types.
 */
public class TimeWindow {
    public final double startTime;
    public final double endTime;

    public TimeWindow(double startTime, double endTime) {
        this.startTime = startTime;
        this.endTime = endTime;
    }

    public double getStartTime() {
        return startTime;
    }

    public double getEndTime() {
        return endTime;
    }

    /**
     * Constructs a new TimeWindow from a String.
     * May be used to reconstruct a TimeWindow from toString().
     * @param timeWindowString a string generated by toString().
     * @return a new TImeWindow, equivalent to the original before being serialized.
     */
    public static TimeWindow parse(String timeWindowString) {
        List<String> timeWindowComponents = Arrays.asList(timeWindowString.split(","));

        double startTime = Double.parseDouble(timeWindowComponents.get(1));
        double endTime = Double.parseDouble(timeWindowComponents.get(2));

        return new TimeWindow(startTime, endTime);
    }

    /**
     * Constructs a new String corresponding to the TimeWindow.
     * @return a new String corresponding to the TimeWindow.
     */
    @Override
    public String toString() {
        return "TimeWindow{" +
               "," + getStartTime() +
               "," + getEndTime() +
               ",}";
    }

    /**
     * Determines whether this is equivalent to another Object.
     * @param other the Object that this is being compared to.
     * @return true if this equals other; false otherwise
     */
    @Override
    public boolean equals(Object other) {
        if(other instanceof TimeWindow) {
            if(other == this) {
                return true;
            }
            TimeWindow otherTimeWindow = (TimeWindow) other;
            return this.startTime == otherTimeWindow.getStartTime() &&
                    this.endTime == otherTimeWindow.getEndTime();
        }
        return false;
    }
}
