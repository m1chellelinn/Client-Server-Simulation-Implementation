package cpen221.mp3.event;

import java.util.Arrays;
import java.util.List;

/**
 * Abstraction Function:
 *     Represents an actuator event with timestamp, client ID, entity ID, entity type, and boolean value.
 *
 * Representation Invariant:
 *     - All fields (TimeStamp, ClientId, EntityId, EntityType, Value) are private and final.
 *     - The data they contain are also immutable types (double, int, String, and boolean).
 *
 * Thread Safety Argument:
 *     This class is threadsafe because it is immutable:
 *     - all fields are private and final. The data they contain are also immutable types.
 */
public class ActuatorEvent implements Event {
    // you can add private fields and methods to this class
    private final double TimeStamp;
    private final int ClientId;
    private final int EntityId;
    private final String EntityType;
    private final boolean Value;

    public ActuatorEvent(double TimeStamp, 
                        int ClientId,
                        int EntityId, 
                        String EntityType, 
                        boolean Value) {
        this.TimeStamp = TimeStamp;
        this.ClientId = ClientId;
        this.EntityId = EntityId;
        this.EntityType = EntityType;
        this.Value = Value;
    }

    // returns the timestamp of the event
    public double getTimeStamp() {
        return TimeStamp;
    }
    // returns the client id of the event
    public int getClientId() {
        return ClientId;
    }
    // returns the entity id of the event
    public int getEntityId() {
        return EntityId;
    }
    // returns the entity type of the event
    public String getEntityType() {
        return EntityType;
    }
    // returns the boolean value of the event if available
    // returns false if the event does not have a boolean value
    public boolean getValueBoolean() {
        return Value;
    }

    // Actuator events do not have a double value
    // returns the double value of the event if available
    // returns -1 if the event does not have a double value
    public double getValueDouble() {
        return -1;
    }

    /**
     * Constructs a new ActuatorEvent from a String.
     * May be used to reconstruct an ActuatorEvent from toString().
     * @param eventString a string generated by toString().
     * @return a new ActuatorEvent, equivalent to the original before being serialized.
     */
    public static ActuatorEvent parse(String eventString) {
        List<String> eventComponents = Arrays.asList(eventString.split(","));

        String timeStampString = eventComponents.get(1);
        double timeStamp = Double.parseDouble(timeStampString);

        String clientIdString = eventComponents.get(2);
        int clientId = Integer.parseInt(clientIdString);

        String entityIdString = eventComponents.get(3);
        int entityId = Integer.parseInt(entityIdString);

        String entityType = eventComponents.get(4);

        String valueBooleanString = eventComponents.get(5);
        boolean valueBoolean = Boolean.parseBoolean(valueBooleanString);

        return new ActuatorEvent(timeStamp, clientId, entityId, entityType, valueBoolean);
    }

    /**
     * Constructs a new String corresponding to the ActuatorEvent.
     * @return a new String corresponding to the ActuatorEvent.
     */
    @Override
    public String toString() {
        //Default implementation: default words like "TimeStamp="
        // might make it harder to parse event on the other end

        /*return "ActuatorEvent{" +
                "TimeStamp=" + getTimeStamp() +
                ",ClientId=" + getClientId() +
                ",EntityId=" + getEntityId() +
                ",EntityType=" + getEntityType() +
                ",Value=" + getValueBoolean() +
                '}';*/

        //I think we can try this instead: every field ends in a comma.
        // maybe we even have abbreviations for "ActuatorEvent"
        return "ActuatorEvent{" +
                "," + getTimeStamp() +
                "," + getClientId() +
                "," + getEntityId() +
                "," + getEntityType() +
                "," + getValueBoolean() +
                "," + '}';
    }

    /**
     * Determines whether this is equivalent to another Object.
     * @param o the Object that this is being compared to.
     * @return true if this equals other; false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if(o instanceof ActuatorEvent) {
            if (o == this) {
                return true;
            }
            ActuatorEvent other = (ActuatorEvent) o;
            return this.TimeStamp == other.TimeStamp
                    && this.ClientId == other.ClientId
                    && this.EntityId == other.EntityId
                    && this.EntityType.equals(other.EntityType)
                    && this.Value == other.Value;
        }
        return false;
    }
}
